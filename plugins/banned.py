from utils import temp 
from database.users_db import db
from info import *
from pyrogram import Client, filters, enums
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram.errors.exceptions.bad_request_400 import MessageTooLong, PeerIdInvalid
from pyrogram.errors import ChatAdminRequired
import asyncio
from pyrogram.enums import ParseMode


@Client.on_message(filters.command('ban') & filters.user(ADMINS))
async def do_ban(bot, message):
    userid = message.text.split(" ", 2)[1] if len(message.text.split(" ", 1)) > 1 else None
    reason = message.text.split(" ", 2)[2] if len(message.text.split(" ", 2)) > 2 else None

    if not userid:
        await message.reply_photo(
            photo="https://i.ibb.co/BHqdCMCY/photo-2025-04-03-11-48-19-7489356433650090000.jpg",  # Generated image path
            caption=(
                "<b><blockquote>P ü·¥á·¥Äs·¥á ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ús·¥á Ä/·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö ·¥°…™·¥õ ú ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö</blockquote>\n"
                "<blockquote>·¥áx : /ban (user/channel_id) (banning reason[Optional]) \n"
                " Ä·¥á·¥Ä ü ·¥áx : <code>/ban 1234567899</code>\n"
                "·¥°…™·¥õ ú  Ä·¥á·¥Äs·¥è…¥ ·¥áx:<code>/ban 1234567899 sending adult links to bot</code>\n"
                "·¥õ·¥è  ô·¥Ä…¥ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü :\n<code>/ban CHANEL_ID</code>\n"
                "·¥áx : <code>/ban -1001234567899</code></blockquote></b>"
            ),
            parse_mode=ParseMode.HTML
        )
        return
    text = await message.reply("<b><blockquote>L·¥á·¥õ ·¥ç·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã üëÄ</blockquote></b>")
    banSts = await db.ban_user(userid)
    if banSts == True:
        await text.edit(
    text=f"<b><code>{userid}</code>  ú·¥Äs  ô·¥á·¥á…¥  ô·¥Ä…¥…¥·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è\n\nS ú·¥è·¥ú ü·¥Ö I s·¥á…¥·¥Ö ·¥Ä…¥ ·¥Ä ü·¥á Ä·¥õ ·¥õ·¥è ·¥õ ú·¥á  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä?</b>",
    reply_markup=InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(" è·¥ás ‚úÖ", callback_data=f"sendAlert_{userid}_{reason if reason else 'no reason provided'}"),
                InlineKeyboardButton("…¥·¥è ‚ùå", callback_data=f"noAlert_{userid}"),
            ],
        ]
    ),
)
    else:
        await text.edit(f"<b>C·¥è…¥·¥õ Ä·¥è ü ü  è·¥è·¥ú Ä ·¥Ä…¥…¢·¥á Ä  ô Ä·¥è...\n<code>{userid}</code> …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥Ä…¥…¥·¥á·¥Ö !!</b>")
    return



@Client.on_message(filters.command('unban') & filters.user(ADMINS))
async def do_unban(bot, message):
    userid = message.text.split(" ", 2)[1] if len(message.text.split(" ", 1)) > 1 else None
    if not userid:
        return await message.reply('<blockquote>G…™·¥†·¥á ·¥ç·¥á ·¥Ä…¥ …™·¥Ö\n·¥áx : <code>/unban 1234567899<code></blockquote>')

    text = await message.reply("<b><blockquote>L·¥á·¥õ ·¥ç·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ü•±</blockquote></b>")
    unban_chk = await db.is_unbanned(userid)

    if unban_chk == True:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo="https://i.ibb.co/BHqdCMCY/photo-2025-04-03-11-48-19-7489356433650090000.jpg",  # Replace with your image URL or file_id
            caption=f"<b><blockquote><code>{userid}</code> …™s ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö üéâ</blockquote></b>",
            parse_mode=ParseMode.HTML
        )

        await text.edit(
            text=(
                f'<b><blockquote><code>{userid}</code> …™s ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö\n'
                'S ú·¥è·¥ú ü·¥Ö I s·¥á…¥·¥Ö ·¥õ ú·¥á  ú·¥Ä·¥ò·¥ò è …¥·¥á·¥°s ·¥Ä ü·¥á Ä·¥õ ·¥õ·¥è ·¥õ ú·¥á ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä?</blockquote></b>'
            ),
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("Y·¥ás ‚úÖ", callback_data=f"sendUnbanAlert_{userid}"),
                        InlineKeyboardButton("N·¥è ‚ùå", callback_data=f"NoUnbanAlert_{userid}"),
                    ],
                ]
            )
        )

    elif unban_chk == False:
        await text.edit('<b><blockquote>Us·¥á Ä …™s …¥·¥è·¥õ  ô·¥Ä…¥…¥·¥á·¥Ö  è·¥á·¥õ.</blockquote></b>')

    else:
        await text.edit(f"<b><blockquote>F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥ ·¥ús·¥á Ä/·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n Ä·¥á·¥Äs·¥è…¥ : {unban_chk}</blockquote></b>")

@Client.on_message(filters.command('banlist') & filters.user(ADMINS))
async def show_banlist(bot: Client, message: Message):
    banned_details = await db.get_banned_user_details()

    if not banned_details:
        await message.reply("<b><blockquote>N·¥è ·¥è…¥·¥á …™s  ô·¥Ä…¥…¥·¥á·¥Ö  è·¥á·¥õ.</blockquote></b>")
        return

    user_list_text = "\n".join([f"<code>{uid}</code> - {name}" for uid, name in banned_details])
    caption = (
        "<b><blockquote> ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Äs  ü…™s·¥õ:</blockquote></b>\n\n"
        f"{user_list_text}"
    )

    await message.reply_photo(
        photo="https://i.ibb.co/BHqdCMCY/photo-2025-04-03-11-48-19-7489356433650090000.jpg",
        caption=caption,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå Close", callback_data="close_banlist")]]
        )
    )


@Client.on_callback_query(filters.regex("close_banlist"))
async def close_banlist_handler(client: Client, callback_query: CallbackQuery):
    await callback_query.message.delete()
